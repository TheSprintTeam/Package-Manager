---
- name: Dynamic Playbook V0.7
  hosts: localhost
  gather_facts: true

  vars:
    jsondata: "{{ lookup('file', 'payload.json') | from_json }}"
    technologies_to_install: "{{ jsondata.technologies }}"
    package_managers:
      - name: homebrew
        command: "/usr/local/bin/brew"
        install_command: "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - name: macports
        command: "/opt/local/bin/port"
        install_command: "curl -fsSL https://www.macports.org/install.sh | bash"

  tasks:
    - name: Gather Facts
      setup:

    # - name: Check operating system
    #   fail:
    #     msg: "This playbook is intended for macOS operating system only."
    #   when: ansible_facts['ansible_system'] != 'Darwin'

    # - name: Check architecture
    #   fail:
    #     msg: "This playbook is intended for non-M1 ARM architecture."
    #   when: ansible_facts['ansible_processor'] == 'aarch64'

    - name: Ping the hosts
      ping:

    - name: Print variable
      debug:
        var: jsondata

    - name: Print technologies
      debug:
        var: item
      loop: "{{ technologies_to_install }}"

    - name: Determine package manager
      set_fact:
        package_manager: "{{ item }}"
      loop: "{{ package_managers }}"
      when: package_manager.command is defined and package_manager.command is not none

    - name: Install package manager
      block:
        - name: Debug package manager
          debug:
            var: package_manager
          when: package_manager is defined

        - name: Install package manager
          raw: "{{ package_manager.install_command }}"
          register: install_output
          retries: 3
          delay: 5
          when: package_manager is defined
          failed_when: install_output is failed

        - name: Fail if package manager installation failed
          fail:
            msg: "Failed to install the package manager ({{ package_manager.name }})."
          when: install_output is failed

        - name: Verify package manager presence
          stat:
            path: "{{ package_manager.command }}"
          register: package_manager_verification
          when: package_manager is defined

        - name: Debug package manager verification
          debug:
            var: package_manager_verification


        - name: Fail if package manager not found
          fail:
            msg: "Package manager ({{ package_manager.name }}) not found on the system."
          when: not package_manager_verification.stat.exists

    - name: Install technologies using Homebrew
      become: true
      shell: "{{ package_manager.command }} install {{ item }}"
      loop: "{{ technologies_to_install }}"
      register: install_output
      ignore_errors: true
      when: package_manager.name == 'homebrew'

    - name: Install technologies using MacPorts
      become: true
      shell: "{{ package_manager.command }} install {{ item }}"
      loop: "{{ technologies_to_install }}"
      register: install_output
      ignore_errors: true
      when: package_manager.name == 'macports'

    - name: Print installation summary
      debug:
        msg: |
          Technology installations summary:
          Successfully installed: {{ technologies_to_install | difference(install_output.results) }}
          Failed installations: {{ install_output.results | rejectattr('rc', 'eq', 0) | map(attribute='item') | list }}
